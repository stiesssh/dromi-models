package de.unistuttgart.ma.importer.slo;

import java.io.IOException;
import java.util.List;
import java.util.Set;

import de.unistuttgart.gropius.slo.SloRule;

public class SolomonImporter implements SloImporter {
	
	private final SolomonApiQuerier querier;
	
	// TODO : this is a DeploymentEnvironment (currently either 'aws' or 'kubernetes', vgl. solomon/**/slo-rule.model.ts)
	private final String queryPathparam; 

	public SolomonImporter(String uri, String queryPathparam) {
		querier = new SolomonApiQuerier(uri);
		this.queryPathparam = queryPathparam;
	}
	
	@Override
	public Set<SloRule> parse() {
		try {
			Set<SloRule> slorules = querier.query(queryPathparam); 
			parse(slorules);
		} catch (IOException | InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private void parse(Set<SloRule> slorules) {
		for (SloRule rule : slorules) {
			ThingWithSlo things = project.getAnythingById((Id.of(rule.getGropiusComponentId())));
			
			Slo slo;
			
			switch (rule.getPresetOptions()) {
			case CUSTOM:
				slo = new Slo(things, rule.getName());
				break;
			case AVAILABILITY:
				slo = new AvailabilitySlo(things, rule.getName());
				break;
			case RESPONSE_TIME:
				slo = new ReponsetimeSlo(things, rule.getName());
				break;

			default:
				slo = new Slo(things, rule.getName());
				break;
			}
			
			
			things.addSlo(slo);
		}
	}
}
