/**
 */
package gropius.CCIMSMetamodel.impl;

import gropius.CCIMSMetamodel.CCIMSMetamodelPackage;
import gropius.CCIMSMetamodel.Component;
import gropius.CCIMSMetamodel.CrossComponentIssue;
import gropius.CCIMSMetamodel.CrossComponentIssueManagementSystem;
import gropius.CCIMSMetamodel.Developer;
import gropius.CCIMSMetamodel.IssueManagementSystem;
import gropius.CCIMSMetamodel.Label;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Cross Component Issue Management System</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link gropius.CCIMSMetamodel.impl.CrossComponentIssueManagementSystemImpl#getIssueRootLocations <em>Issue Root Locations</em>}</li>
 *   <li>{@link gropius.CCIMSMetamodel.impl.CrossComponentIssueManagementSystemImpl#getManagedCroCoIssues <em>Managed Cro Co Issues</em>}</li>
 *   <li>{@link gropius.CCIMSMetamodel.impl.CrossComponentIssueManagementSystemImpl#getLabels <em>Labels</em>}</li>
 *   <li>{@link gropius.CCIMSMetamodel.impl.CrossComponentIssueManagementSystemImpl#getDevelopers <em>Developers</em>}</li>
 *   <li>{@link gropius.CCIMSMetamodel.impl.CrossComponentIssueManagementSystemImpl#getComponents <em>Components</em>}</li>
 *   <li>{@link gropius.CCIMSMetamodel.impl.CrossComponentIssueManagementSystemImpl#getLocationUri <em>Location Uri</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CrossComponentIssueManagementSystemImpl extends MinimalEObjectImpl.Container implements CrossComponentIssueManagementSystem {
	/**
	 * The cached value of the '{@link #getIssueRootLocations() <em>Issue Root Locations</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getIssueRootLocations()
	 * @generated
	 * @ordered
	 */
	protected EList<IssueManagementSystem> issueRootLocations;

	/**
	 * The cached value of the '{@link #getManagedCroCoIssues() <em>Managed Cro Co Issues</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getManagedCroCoIssues()
	 * @generated
	 * @ordered
	 */
	protected EList<CrossComponentIssue> managedCroCoIssues;

	/**
	 * The cached value of the '{@link #getLabels() <em>Labels</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getLabels()
	 * @generated
	 * @ordered
	 */
	protected EList<Label> labels;

	/**
	 * The cached value of the '{@link #getDevelopers() <em>Developers</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getDevelopers()
	 * @generated
	 * @ordered
	 */
	protected EList<Developer> developers;

	/**
	 * The cached value of the '{@link #getComponents() <em>Components</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getComponents()
	 * @generated
	 * @ordered
	 */
	protected EList<Component> components;

	/**
	 * The default value of the '{@link #getLocationUri() <em>Location Uri</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getLocationUri()
	 * @generated
	 * @ordered
	 */
	protected static final String LOCATION_URI_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getLocationUri() <em>Location Uri</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getLocationUri()
	 * @generated
	 * @ordered
	 */
	protected String locationUri = LOCATION_URI_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CrossComponentIssueManagementSystemImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return CCIMSMetamodelPackage.Literals.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<IssueManagementSystem> getIssueRootLocations() {
		if (issueRootLocations == null) {
			issueRootLocations = new EObjectContainmentEList<IssueManagementSystem>(IssueManagementSystem.class, this, CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__ISSUE_ROOT_LOCATIONS);
		}
		return issueRootLocations;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<CrossComponentIssue> getManagedCroCoIssues() {
		if (managedCroCoIssues == null) {
			managedCroCoIssues = new EObjectContainmentEList<CrossComponentIssue>(CrossComponentIssue.class, this, CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__MANAGED_CRO_CO_ISSUES);
		}
		return managedCroCoIssues;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Label> getLabels() {
		if (labels == null) {
			labels = new EObjectContainmentEList<Label>(Label.class, this, CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__LABELS);
		}
		return labels;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Developer> getDevelopers() {
		if (developers == null) {
			developers = new EObjectContainmentEList<Developer>(Developer.class, this, CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__DEVELOPERS);
		}
		return developers;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Component> getComponents() {
		if (components == null) {
			components = new EObjectContainmentEList<Component>(Component.class, this, CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__COMPONENTS);
		}
		return components;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getLocationUri() {
		return locationUri;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLocationUri(String newLocationUri) {
		String oldLocationUri = locationUri;
		locationUri = newLocationUri;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__LOCATION_URI, oldLocationUri, locationUri));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__ISSUE_ROOT_LOCATIONS:
				return ((InternalEList<?>)getIssueRootLocations()).basicRemove(otherEnd, msgs);
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__MANAGED_CRO_CO_ISSUES:
				return ((InternalEList<?>)getManagedCroCoIssues()).basicRemove(otherEnd, msgs);
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__LABELS:
				return ((InternalEList<?>)getLabels()).basicRemove(otherEnd, msgs);
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__DEVELOPERS:
				return ((InternalEList<?>)getDevelopers()).basicRemove(otherEnd, msgs);
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__COMPONENTS:
				return ((InternalEList<?>)getComponents()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__ISSUE_ROOT_LOCATIONS:
				return getIssueRootLocations();
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__MANAGED_CRO_CO_ISSUES:
				return getManagedCroCoIssues();
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__LABELS:
				return getLabels();
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__DEVELOPERS:
				return getDevelopers();
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__COMPONENTS:
				return getComponents();
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__LOCATION_URI:
				return getLocationUri();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__ISSUE_ROOT_LOCATIONS:
				getIssueRootLocations().clear();
				getIssueRootLocations().addAll((Collection<? extends IssueManagementSystem>)newValue);
				return;
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__MANAGED_CRO_CO_ISSUES:
				getManagedCroCoIssues().clear();
				getManagedCroCoIssues().addAll((Collection<? extends CrossComponentIssue>)newValue);
				return;
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__LABELS:
				getLabels().clear();
				getLabels().addAll((Collection<? extends Label>)newValue);
				return;
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__DEVELOPERS:
				getDevelopers().clear();
				getDevelopers().addAll((Collection<? extends Developer>)newValue);
				return;
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__COMPONENTS:
				getComponents().clear();
				getComponents().addAll((Collection<? extends Component>)newValue);
				return;
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__LOCATION_URI:
				setLocationUri((String)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__ISSUE_ROOT_LOCATIONS:
				getIssueRootLocations().clear();
				return;
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__MANAGED_CRO_CO_ISSUES:
				getManagedCroCoIssues().clear();
				return;
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__LABELS:
				getLabels().clear();
				return;
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__DEVELOPERS:
				getDevelopers().clear();
				return;
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__COMPONENTS:
				getComponents().clear();
				return;
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__LOCATION_URI:
				setLocationUri(LOCATION_URI_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__ISSUE_ROOT_LOCATIONS:
				return issueRootLocations != null && !issueRootLocations.isEmpty();
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__MANAGED_CRO_CO_ISSUES:
				return managedCroCoIssues != null && !managedCroCoIssues.isEmpty();
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__LABELS:
				return labels != null && !labels.isEmpty();
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__DEVELOPERS:
				return developers != null && !developers.isEmpty();
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__COMPONENTS:
				return components != null && !components.isEmpty();
			case CCIMSMetamodelPackage.CROSS_COMPONENT_ISSUE_MANAGEMENT_SYSTEM__LOCATION_URI:
				return LOCATION_URI_EDEFAULT == null ? locationUri != null : !LOCATION_URI_EDEFAULT.equals(locationUri);
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (locationUri: ");
		result.append(locationUri);
		result.append(')');
		return result.toString();
	}

} //CrossComponentIssueManagementSystemImpl
