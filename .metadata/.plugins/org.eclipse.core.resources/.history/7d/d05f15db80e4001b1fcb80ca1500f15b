package saga.design;

import org.eclipse.sirius.diagram.ui.tools.api.layout.provider.DefaultLayoutProvider;

import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.services.layout.AbstractLayoutEditPartProvider;
import org.eclipse.gmf.runtime.diagram.ui.services.layout.ILayoutNode;
import org.eclipse.gmf.runtime.diagram.ui.services.layout.ILayoutNodeOperation;
import org.eclipse.gmf.runtime.diagram.ui.services.layout.LayoutType;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.sirius.common.tools.DslCommonPlugin;
import org.eclipse.sirius.diagram.DiagramPackage;
import org.eclipse.sirius.diagram.description.CustomLayoutConfiguration;
import org.eclipse.sirius.diagram.ui.business.api.view.SiriusLayoutDataManager;
import org.eclipse.sirius.diagram.ui.tools.internal.layout.provider.LayoutService;

import com.google.common.collect.Iterables;

public class MyLayoutProvider extends DefaultLayoutProvider{
	
//    @Override
//    public Command layoutEditParts(final List selectedObjects, final IAdaptable layoutHint) {
//        Injector injector = LayoutConnectorsService.getInstance().getInjector(null, selectedObjects);
//        ElkDiagramLayoutConnector connector = injector.getInstance(ElkDiagramLayoutConnector.class);
//        LayoutMapping layoutMapping = connector.buildLayoutGraph(null, selectedObjects);
//        connector.layout(layoutMapping);
//        connector.transferLayout(layoutMapping);
//        return connector.getApplyCommand(layoutMapping);
//    }

	
}
